// // JENKINS CD PIPELINE
// // Here the image stored in Dockerhub will be deployed using K8s
// // IMP NOTE: Store your EC2 instance username & key in Jenkins credentials

// pipeline {
//     agent any
//     // DECLARE THE VARIABLES HERE:
//     environment {
//     NODE_IP = '172.31.22.161'   // paste your Node-Server private IP here
//     EC2_NAME = "ec2-user"                  // enter your AWS EC2 username
//     PIPELINE_NAME = "CI-Pipeline"          // enter your pipeline name here 
//     PROJECT_NAME = "DevopsProject-Main"        // enter your Devops project name here
//     }

//     stages {
//       // sshagent(['ec2_user']): Manages SSH credentials for authenticating to the remote server.
//       // ssh -o StrictHostKeyChecking=no ...: Connects to the remote node server.
//       // scp ... deployment.yaml and scp ... service.yaml: Securely copies the Kubernetes manifest files to the remote node server.
      
//         stage("1. Pull Files") {
//             // Copy K8s manifest files from Master-Server workspace to Node-server
//             steps {
//               sshagent(['ec2_user']) {         // install 'ssh agent' plugin & generate 'ssh-agent' pipeline syntax generator 
//                 sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP}"   // enter your Node Server's private IP here
//                 sh "scp /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/deployment.yaml ${EC2_NAME}@${NODE_IP}:/home/ec2-user/"
//                 sh "scp /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/service.yaml ${EC2_NAME}@${NODE_IP}:/home/ec2-user/"
//               }
//             }
//         }

//         stage('2. Approval') {
//           // If 'manual approval' is required, then it is called 'Continuous Delivery'
//           // If it is totally automated, then it is called 'Continuous Deployment'
//             steps {
//                 input message: 'Approve deployment?'
//             }
//         }

//         stage("3. Deployment") {
//           // K8s Deployment using Ansible
//             // i. Ensure to establish passwordless connection between Master & Node first
//            // ii. Your deployment.yaml file must contain the Dockerhub image within the container block
//             steps {
//               sshagent(['ec2_user']) {          // store EC2 username & pem-key in Jenkins credentials
//                 sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP}"   // enter your Node-Server private IP here
//                 sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl apply -f deployment.yaml"
//                 sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl apply -f service.yaml"
//                 sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl rollout restart deploy"
//                 sh "ssh -o StrictHostKeyChecking=no ${EC2_NAME}@${NODE_IP} kubectl get service"
//               }
//             }
//         }
//     }
// }

pipeline {
    agent any
    environment {
        NODE_IP = '172.31.22.161'   // Node Server's private IP
        EC2_USER = "ec2-user"        // AWS EC2 username
        PIPELINE_NAME = "CI-Pipeline" // Pipeline name
        PROJECT_NAME = "DevopsProject-Main" // Project name
    }

    stages {
        stage("1. Pull Files") {
            steps {
                script {
                    // Validate the existence of files before proceeding
                    sh "ls -la /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/"
                }
                sshagent(['ec2_user']) {
                    sh "scp /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/deployment.yaml ${EC2_USER}@${NODE_IP}:/home/ec2-user/"
                    sh "scp /var/lib/jenkins/workspace/${PIPELINE_NAME}/${PROJECT_NAME}/service.yaml ${EC2_USER}@${NODE_IP}:/home/ec2-user/"
                }
            }
        }

        stage('2. Approval') {
            steps {
                input message: 'Approve deployment?'
            }
        }

        stage("3. Deployment") {
            steps {
                sshagent(['ec2_user']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no ${EC2_USER}@${NODE_IP} '
                            kubectl apply -f /home/ec2-user/deployment.yaml &&
                            kubectl apply -f /home/ec2-user/service.yaml &&
                            kubectl rollout restart deploy &&
                            kubectl get service
                        '
                    """
                }
            }
        }
    }
}

